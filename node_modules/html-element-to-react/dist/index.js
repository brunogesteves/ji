"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.convert = void 0;

var _react = _interopRequireDefault(require("react"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function camelCase(s, delimiter) {
  var a = s.split(delimiter);
  return delimiter + a[1].slice(0, 1).toUpperCase() + a[1].slice(1, a[1].length);
}

function getProps(el) {
  var props = {};
  var events = {};

  for (var k in el) {
    if (/^on/.test(k) && el[k]) {
      events[camelCase(k, "on")] = el[k];
    }

    if (k === "className" && el[k]) {
      props[k] = el[k];
    }

    if (k === "src" && el[k]) {
      props[k] = el[k];
    }

    if (k === "href" && el[k]) {
      props[k] = el[k];
    }
  }

  props = Object.assign(props, events);
  return props;
}

function getChildren(elements) {
  var children = [];
  if (!elements) return children;

  for (var i = 0; i < elements.length; i++) {
    var el = elements[i];

    var props = _objectSpread({}, getProps(el));

    if (el.childNodes.length) {
      children.push(_react["default"].createElement.apply(_react["default"], [el.tagName.toLowerCase(), props === {} ? null : props].concat(_toConsumableArray(getChildren(el.childNodes)))));
    } else {
      if (el.nodeType === 3) {
        children.push(el.textContent);
      } else if (el.nodeType === 1) {
        if (["VIDEO", "IMG", "AUDIO"].includes(el.nodeName)) {
          children.push(_react["default"].createElement(el.tagName.toLowerCase(), props === {} ? null : props));
        }
      }
    }
  }

  return children;
}

var convert = function convert(domElement) {
  if (!domElement) return null;

  var props = _objectSpread({}, getProps(domElement));

  return _react["default"].createElement.apply(_react["default"], [domElement.tagName.toLowerCase(), props === {} ? null : props].concat(_toConsumableArray(getChildren(domElement.childNodes))));
};

exports.convert = convert;