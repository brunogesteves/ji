{"ast":null,"code":"var _jsxFileName = \"/home/bruno/trabalho/ji/src/components/FileDrop/FileDrop.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\"; // import \"react-dropzone-uploader/dist/styles.css\";\n\nimport \"./FileDrop.css\";\nimport { FILE_UPLOAD } from \"../../Graphql/Mutations\";\nimport { useMutation } from \"@apollo/client\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function FileDrop(props) {\n  _s();\n\n  // const [file, setFile] = useState(\"\");\n  // const [fileName, setFileName] = useState(\"\");\n  // const [uploadedFile, setUploadedFile] = useState({});\n  // const [response, setResponse] = useState(\"\");\n  // const [uploadPercentage, setUploadPercentage] = useState();\n  // function onChange(e) {\n  //   setFile(e.target.files[0]);\n  //   setFileName(e.target.files[0].name);\n  // }\n  // const [uploadImage, { data: fileUploadData }] = useMutation(UPLOAD_IMAGE, {\n  //   onCompleted: (data) => {\n  //     console.log(data);\n  //     if (data.fileUpload?.success) {\n  //       alert(data.fileUpload?.message);\n  //       setResponse(data.fileUpload?.message);\n  //     }\n  //   },\n  // });\n  // async function uploadFile() {\n  //   if (!file) {\n  //     return;\n  //   }\n  //   // let data = {\n  //   //   file:e.target.files[0],\n  //   // }\n  //   uploadImage({\n  //     variables: file,\n  //   });\n  // }\n  const [response, setResponse] = useState(\"\");\n  const [fileUpload, {\n    data\n  }] = useMutation(FILE_UPLOAD, {\n    onError: err => {\n      console.log(err);\n      setResponse(err.message);\n    },\n    onCompleted: data => {\n      var _data$fileUpload;\n\n      console.log(data);\n\n      if ((_data$fileUpload = data.fileUpload) === null || _data$fileUpload === void 0 ? void 0 : _data$fileUpload.success) {\n        var _data$fileUpload2, _data$fileUpload3;\n\n        alert((_data$fileUpload2 = data.fileUpload) === null || _data$fileUpload2 === void 0 ? void 0 : _data$fileUpload2.message);\n        setResponse((_data$fileUpload3 = data.fileUpload) === null || _data$fileUpload3 === void 0 ? void 0 : _data$fileUpload3.message);\n      }\n    }\n  });\n  console.log(data);\n\n  const uploadFile = e => {\n    if (!e.target.files) {\n      return;\n    }\n\n    let data = {\n      file: e.target.files[0]\n    };\n    fileUpload({\n      variables: data\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mb-3\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        name: \"file[]\",\n        id: \"file\",\n        onChange: uploadFile\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this), response ? response : null, /*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"form-label\",\n        htmlFor: \"formFile\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"submit\",\n        value: \"Adicionar\",\n        className: \"btn btn-primary btn-block mt-4 col-12\",\n        onClick: uploadFile\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"progress\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"progress-bar\" // style={{ width: `${uploadPercentage}%` }}\n        ,\n        role: \"progressbar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(FileDrop, \"MLo6dsoRqfQxQ4EKG3x8OBryWq4=\", false, function () {\n  return [useMutation];\n});\n\n_c = FileDrop;\n\nvar _c;\n\n$RefreshReg$(_c, \"FileDrop\");","map":{"version":3,"sources":["/home/bruno/trabalho/ji/src/components/FileDrop/FileDrop.tsx"],"names":["React","useState","FILE_UPLOAD","useMutation","FileDrop","props","response","setResponse","fileUpload","data","onError","err","console","log","message","onCompleted","success","alert","uploadFile","e","target","files","file","variables"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC,C,CAEA;;AACA,OAAO,gBAAP;AACA,SAASC,WAAT,QAA4B,yBAA5B;AACA,SAASC,WAAT,QAA4B,gBAA5B;;;AAEA,eAAe,SAASC,QAAT,CAAkBC,KAAlB,EAAyB;AAAA;;AACtC;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BN,QAAQ,CAAC,EAAD,CAAxC;AAEA,QAAM,CAACO,UAAD,EAAa;AAAEC,IAAAA;AAAF,GAAb,IAAyBN,WAAW,CAACD,WAAD,EAAc;AACtDQ,IAAAA,OAAO,EAAGC,GAAD,IAAS;AAChBC,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACAJ,MAAAA,WAAW,CAACI,GAAG,CAACG,OAAL,CAAX;AACD,KAJqD;AAKtDC,IAAAA,WAAW,EAAGN,IAAD,IAAU;AAAA;;AACrBG,MAAAA,OAAO,CAACC,GAAR,CAAYJ,IAAZ;;AACA,8BAAIA,IAAI,CAACD,UAAT,qDAAI,iBAAiBQ,OAArB,EAA8B;AAAA;;AAC5BC,QAAAA,KAAK,sBAACR,IAAI,CAACD,UAAN,sDAAC,kBAAiBM,OAAlB,CAAL;AACAP,QAAAA,WAAW,sBAACE,IAAI,CAACD,UAAN,sDAAC,kBAAiBM,OAAlB,CAAX;AACD;AACF;AAXqD,GAAd,CAA1C;AAcAF,EAAAA,OAAO,CAACC,GAAR,CAAYJ,IAAZ;;AAEA,QAAMS,UAAU,GAAIC,CAAD,IAAO;AACxB,QAAI,CAACA,CAAC,CAACC,MAAF,CAASC,KAAd,EAAqB;AACnB;AACD;;AAED,QAAIZ,IAAI,GAAG;AACTa,MAAAA,IAAI,EAAEH,CAAC,CAACC,MAAF,CAASC,KAAT,CAAe,CAAf;AADG,KAAX;AAGAb,IAAAA,UAAU,CAAC;AACTe,MAAAA,SAAS,EAAEd;AADF,KAAD,CAAV;AAGD,GAXD;;AAaA,sBACE;AAAA,4BACE;AAAK,MAAA,SAAS,EAAC,MAAf;AAAA,8BACE;AAAO,QAAA,IAAI,EAAC,MAAZ;AAAmB,QAAA,IAAI,EAAC,QAAxB;AAAiC,QAAA,EAAE,EAAC,MAApC;AAA2C,QAAA,QAAQ,EAAES;AAArD;AAAA;AAAA;AAAA;AAAA,cADF,EAEGZ,QAAQ,GAAGA,QAAH,GAAc,IAFzB,eAIE;AAAO,QAAA,SAAS,EAAC,YAAjB;AAA8B,QAAA,OAAO,EAAC;AAAtC;AAAA;AAAA;AAAA;AAAA,cAJF,eAOE;AACE,QAAA,IAAI,EAAC,QADP;AAEE,QAAA,KAAK,EAAC,WAFR;AAGE,QAAA,SAAS,EAAC,uCAHZ;AAIE,QAAA,OAAO,EAAEY;AAJX;AAAA;AAAA;AAAA;AAAA,cAPF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAeE;AAAK,MAAA,SAAS,EAAC,UAAf;AAAA,6BACE;AACE,QAAA,SAAS,EAAC,cADZ,CAEE;AAFF;AAGE,QAAA,IAAI,EAAC;AAHP;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAfF;AAAA,kBADF;AAiCD;;GAlGuBd,Q;UAoCSD,W;;;KApCTC,Q","sourcesContent":["import React, { useState } from \"react\";\n\n// import \"react-dropzone-uploader/dist/styles.css\";\nimport \"./FileDrop.css\";\nimport { FILE_UPLOAD } from \"../../Graphql/Mutations\";\nimport { useMutation } from \"@apollo/client\";\n\nexport default function FileDrop(props) {\n  // const [file, setFile] = useState(\"\");\n  // const [fileName, setFileName] = useState(\"\");\n  // const [uploadedFile, setUploadedFile] = useState({});\n  // const [response, setResponse] = useState(\"\");\n  // const [uploadPercentage, setUploadPercentage] = useState();\n\n  // function onChange(e) {\n  //   setFile(e.target.files[0]);\n  //   setFileName(e.target.files[0].name);\n  // }\n\n  // const [uploadImage, { data: fileUploadData }] = useMutation(UPLOAD_IMAGE, {\n  //   onCompleted: (data) => {\n  //     console.log(data);\n  //     if (data.fileUpload?.success) {\n  //       alert(data.fileUpload?.message);\n  //       setResponse(data.fileUpload?.message);\n  //     }\n  //   },\n  // });\n\n  // async function uploadFile() {\n  //   if (!file) {\n  //     return;\n  //   }\n\n  //   // let data = {\n  //   //   file:e.target.files[0],\n  //   // }\n  //   uploadImage({\n  //     variables: file,\n  //   });\n  // }\n  const [response, setResponse] = useState(\"\");\n\n  const [fileUpload, { data }] = useMutation(FILE_UPLOAD, {\n    onError: (err) => {\n      console.log(err);\n      setResponse(err.message);\n    },\n    onCompleted: (data) => {\n      console.log(data);\n      if (data.fileUpload?.success) {\n        alert(data.fileUpload?.message);\n        setResponse(data.fileUpload?.message);\n      }\n    },\n  });\n\n  console.log(data);\n\n  const uploadFile = (e) => {\n    if (!e.target.files) {\n      return;\n    }\n\n    let data = {\n      file: e.target.files[0],\n    };\n    fileUpload({\n      variables: data,\n    });\n  };\n\n  return (\n    <>\n      <div className=\"mb-3\">\n        <input type=\"file\" name=\"file[]\" id=\"file\" onChange={uploadFile} />\n        {response ? response : null}\n        {/* <input className=\"form-control\" type=\"file\" id=\"formFile\" onChange={onChange} /> */}\n        <label className=\"form-label\" htmlFor=\"formFile\">\n          {/* {fileName ? fileName : \"Selecione um arquivo\"} */}\n        </label>\n        <input\n          type=\"submit\"\n          value=\"Adicionar\"\n          className=\"btn btn-primary btn-block mt-4 col-12\"\n          onClick={uploadFile}\n        />\n      </div>\n      <div className=\"progress\">\n        <div\n          className=\"progress-bar\"\n          // style={{ width: `${uploadPercentage}%` }}\n          role=\"progressbar\"\n        ></div>\n      </div>\n      {/* {uploadedFile ? (\n        <div className=\"row mt-5\">\n          <div className=\"col-md-6 m-auto \">\n            <h3 className=\"text-center\">{uploadedFile.fileName}</h3>\n            <img style={{ width: \"100%\" }} src={uploadedFile.filePath} alt=\"\" />\n          </div>\n        </div>\n      ) : null} */}\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}