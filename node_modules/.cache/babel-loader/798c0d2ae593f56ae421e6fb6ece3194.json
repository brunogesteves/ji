{"ast":null,"code":"var _jsxFileName = \"/home/bruno/trabalho/ji/src/Pages/Admin/NewPost/NewPost.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef, useEffect } from \"react\";\nimport SunEditor from \"suneditor-react\";\nimport slugify from \"react-slugify\";\nimport { Redirect } from \"react-router-dom\";\nimport \"suneditor/dist/css/suneditor.min.css\"; // Import Sun Editor's CSS File\n\nimport axios from \"axios\";\nimport Modal from \"@mui/material/Modal\";\nimport { base_url } from \"../../../config\";\nimport \"./NewPost.css\";\nimport Admin from \"../Admin\";\nimport ImagesWIndow from \"../../../Components/ImagesWIndow/ImagesWIndow\";\nimport NewCategory from \"../../../Components/NewCategory/NewCategory\"; // import CategoryService from \"../../../Services/Category\";\n\nimport { useQuery } from \"@apollo/client\";\nimport { GET_ALL_CATEGORIES } from \"../../../Graphql/Queries\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar moment = require(\"moment\");\n\nexport default function NewPost(props) {\n  _s();\n\n  // var scheduleTime = moment().format(\"YYYY-MM-DD HH:mm\");\n  // const [namePost, setNamePost] = useState(\"\");\n  // const [content, setContent] = useState(\"\");\n  // const [thumb, setThumb] = useState(\"\");\n  // const [categories, setCategories] = useState([]);\n  // const [word, setWord] = useState(\"\");\n  // const [category, setCategory] = useState();\n  // const [modalShow, setModalShow] = useState(false);\n  // const [isAdded, setIsAdded] = useState(false);\n  // const [datetime, setDatetime] = useState(\"\");\n  // const [id, setId] = useState(\"\");\n  // const [schedule, setSchedule] = useState(false);\n  // const [slide, setSlide] = useState(false);\n  // const [gameplay, setGameplay] = useState(false);\n  // const [gallery, setGallery] = useState(false);\n  // const [middle, setMiddle] = useState(false);\n  // const [publicpost] = useState(1);\n  const [isCategoryCreated, setIsCategoryCreated] = useState(false);\n  const {\n    data,\n    refetch\n  } = useQuery(GET_ALL_CATEGORIES);\n  const editor = useRef(null);\n\n  function dataForm(data) {\n    setContent(data);\n  }\n\n  function createPost() {// namePost && content && content && thumb\n    //   ? NewPostService.new(\n    //       namePost,\n    //       content,\n    //       category,\n    //       thumb,\n    //       slugify(namePost, { delimiter: \"-\" }),\n    //       schedule ? 1 : 0,\n    //       datetime ? datetime : scheduleTime,\n    //       slide ? 1 : 0,\n    //       middle ? 1 : 0,\n    //       gameplay ? 1 : 0,\n    //       gallery ? 1 : 0,\n    //       publicpost\n    //       // create table posts (id int auto_increment primary key, name varchar(255), content text, category varchar(255), thumb varchar(255), slug varchar(255), schedule slide tinyint(1), datetime datetime, slide tinyint(1), middle tinyint(1), gameplay tinyint(1), publicpost tinyint(1));\n    //     )\n    //       .then((res) => {\n    //         if (res.insertId) {\n    //           setId(res.insertId);\n    //           setIsAdded(true);\n    //         } else {\n    //           alert(res);\n    //           setIsAdded(false);\n    //         }\n    //       })\n    //       .catch((error) => {\n    //         console.log(\"Erro ao adicionar o post\");\n    //       })\n    //   : alert(\"HÃ¡ campos vazios\");\n  } // useEffect(() => {\n  //   CategoryService.get().then((res) => {\n  //     setCategories(res);\n  //   });\n  // }, [word]);\n\n\n  useEffect(() => {\n    if (isCategoryCreated) refetch();\n  }, [isCategoryCreated]);\n\n  function sendFile(file) {\n    const url = `${base_url}/images/image`;\n    const data = new FormData();\n    data.append(\"file\", file);\n    const options = {\n      headers: {\n        \"Content-Type\": \"multipart/form-data\"\n      }\n    };\n    axios.post(url, data, options);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [isAdded ? /*#__PURE__*/_jsxDEV(Redirect, {\n      to: `/admin/updatepost/${id}`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 18\n    }, this) : null, /*#__PURE__*/_jsxDEV(Admin, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"newContent\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"newContent-field\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: createPost,\n            children: schedule ? \"Agendar\" : \"Publicar\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 13\n          }, this), \"Nome:\", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            onChange: e => setNamePost(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 13\n          }, this), \"Agendar\", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            onClick: e => setSchedule(e.target.checked)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 13\n          }, this), schedule ? /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"datetime-local\",\n            className: schedule ? \"schedule-show\" : \"schedule\",\n            onChange: e => setDatetime(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 15\n          }, this) : null, \"Slide\", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            onClick: e => setSlide(e.target.checked)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 121,\n            columnNumber: 13\n          }, this), \"Meio\", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            onClick: e => setMiddle(e.target.checked)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 13\n          }, this), \"Gameplay\", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            onClick: e => setGameplay(e.target.checked)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 13\n          }, this), \"Galeria\", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            onClick: e => setGallery(e.target.checked)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(NewCategory, {\n            isCategoryCreated: setIsCategoryCreated\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            onChange: e => setCategory(e.target.value),\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              children: \"Escolha uma Categoria\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 130,\n              columnNumber: 15\n            }, this), data && data.getAllCategories.map((res, i) => /*#__PURE__*/_jsxDEV(\"option\", {\n              className: \"option-category\",\n              children: res.name\n            }, i, false, {\n              fileName: _jsxFileName,\n              lineNumber: 133,\n              columnNumber: 19\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 129,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n            src: `/${thumb}`,\n            alt: thumb\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 138,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"button\",\n              onClick: () => setModalShow(true),\n              children: \"Adicionar Imagem\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 140,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Modal, {\n              open: modalShow,\n              onClose: () => setModalShow(false),\n              \"aria-labelledby\": \"simple-modal-title\",\n              \"aria-describedby\": \"simple-modal-description\",\n              children: /*#__PURE__*/_jsxDEV(ImagesWIndow, {\n                show: modalShow,\n                onHide: () => setModalShow(false),\n                setThumb: setThumb,\n                setModalShow: setModalShow\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 150,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 143,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 139,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"newContent-form\",\n          children: /*#__PURE__*/_jsxDEV(SunEditor, {\n            ref: editor,\n            lang: \"pt_br\",\n            width: \"100%\",\n            height: \"400\",\n            name: \"my-editor\",\n            setOptions: {\n              mode: \"classic\",\n              katex: \"window.katex\",\n              imageWidth: \"(auto)\",\n              imageHeight: \"(auto)\",\n              // imageUploadUrl: `${base_url}upload`,\n              imageAccept: \"*\",\n              imageGalleryUrl: `${base_url}/images`,\n              imageFileInput: true,\n              videoFileInput: false,\n              tabDisable: false,\n              buttonList: [[\"undo\", \"redo\", \"font\", \"fontSize\", \"formatBlock\", \"paragraphStyle\", \"blockquote\", \"bold\", \"underline\", \"italic\", \"strike\", \"subscript\", \"superscript\", \"fontColor\", \"hiliteColor\", \"textStyle\", \"removeFormat\", \"outdent\", \"indent\", \"align\", \"horizontalRule\", \"list\", \"lineHeight\", \"table\", \"link\", \"image\", \"video\", \"audio\", \"math\", \"imageGallery\", \"fullScreen\", \"showBlocks\", \"codeView\", \"preview\", \"print\", \"save\", \"template\"]]\n            },\n            onChange: dataForm,\n            onImageUploadBefore: files => {\n              let nameImage = files[0].name;\n              sendFile(files[0]);\n              editor.current.editor.insertHTML(`<img src=\"/${nameImage}\">`);\n              return true;\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 161,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 103,\n    columnNumber: 5\n  }, this);\n}\n\n_s(NewPost, \"DFONE0ZAx6sDszqS0tBoaCiwvhQ=\", false, function () {\n  return [useQuery];\n});\n\n_c = NewPost;\n\nvar _c;\n\n$RefreshReg$(_c, \"NewPost\");","map":{"version":3,"sources":["/home/bruno/trabalho/ji/src/Pages/Admin/NewPost/NewPost.js"],"names":["React","useState","useRef","useEffect","SunEditor","slugify","Redirect","axios","Modal","base_url","Admin","ImagesWIndow","NewCategory","useQuery","GET_ALL_CATEGORIES","moment","require","NewPost","props","isCategoryCreated","setIsCategoryCreated","data","refetch","editor","dataForm","setContent","createPost","sendFile","file","url","FormData","append","options","headers","post","isAdded","id","schedule","e","setNamePost","target","value","setSchedule","checked","setDatetime","setSlide","setMiddle","setGameplay","setGallery","setCategory","getAllCategories","map","res","i","name","thumb","setModalShow","modalShow","setThumb","mode","katex","imageWidth","imageHeight","imageAccept","imageGalleryUrl","imageFileInput","videoFileInput","tabDisable","buttonList","files","nameImage","current","insertHTML"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\nimport SunEditor from \"suneditor-react\";\nimport slugify from \"react-slugify\";\nimport { Redirect } from \"react-router-dom\";\n\nimport \"suneditor/dist/css/suneditor.min.css\"; // Import Sun Editor's CSS File\nimport axios from \"axios\";\nimport Modal from \"@mui/material/Modal\";\nimport { base_url } from \"../../../config\";\nimport \"./NewPost.css\";\n\nimport Admin from \"../Admin\";\nimport ImagesWIndow from \"../../../Components/ImagesWIndow/ImagesWIndow\";\nimport NewCategory from \"../../../Components/NewCategory/NewCategory\";\n// import CategoryService from \"../../../Services/Category\";\nimport { useQuery } from \"@apollo/client\";\nimport { GET_ALL_CATEGORIES } from \"../../../Graphql/Queries\";\nvar moment = require(\"moment\");\n\nexport default function NewPost(props) {\n  // var scheduleTime = moment().format(\"YYYY-MM-DD HH:mm\");\n  // const [namePost, setNamePost] = useState(\"\");\n  // const [content, setContent] = useState(\"\");\n  // const [thumb, setThumb] = useState(\"\");\n  // const [categories, setCategories] = useState([]);\n  // const [word, setWord] = useState(\"\");\n  // const [category, setCategory] = useState();\n  // const [modalShow, setModalShow] = useState(false);\n  // const [isAdded, setIsAdded] = useState(false);\n  // const [datetime, setDatetime] = useState(\"\");\n  // const [id, setId] = useState(\"\");\n  // const [schedule, setSchedule] = useState(false);\n  // const [slide, setSlide] = useState(false);\n  // const [gameplay, setGameplay] = useState(false);\n  // const [gallery, setGallery] = useState(false);\n  // const [middle, setMiddle] = useState(false);\n  // const [publicpost] = useState(1);\n  const [isCategoryCreated, setIsCategoryCreated] = useState(false);\n  const { data, refetch } = useQuery(GET_ALL_CATEGORIES);\n\n  const editor = useRef(null);\n\n  function dataForm(data) {\n    setContent(data);\n  }\n\n  function createPost() {\n    // namePost && content && content && thumb\n    //   ? NewPostService.new(\n    //       namePost,\n    //       content,\n    //       category,\n    //       thumb,\n    //       slugify(namePost, { delimiter: \"-\" }),\n    //       schedule ? 1 : 0,\n    //       datetime ? datetime : scheduleTime,\n    //       slide ? 1 : 0,\n    //       middle ? 1 : 0,\n    //       gameplay ? 1 : 0,\n    //       gallery ? 1 : 0,\n    //       publicpost\n\n    //       // create table posts (id int auto_increment primary key, name varchar(255), content text, category varchar(255), thumb varchar(255), slug varchar(255), schedule slide tinyint(1), datetime datetime, slide tinyint(1), middle tinyint(1), gameplay tinyint(1), publicpost tinyint(1));\n    //     )\n    //       .then((res) => {\n    //         if (res.insertId) {\n    //           setId(res.insertId);\n    //           setIsAdded(true);\n    //         } else {\n    //           alert(res);\n    //           setIsAdded(false);\n    //         }\n    //       })\n    //       .catch((error) => {\n    //         console.log(\"Erro ao adicionar o post\");\n    //       })\n    //   : alert(\"HÃ¡ campos vazios\");\n  }\n\n  // useEffect(() => {\n  //   CategoryService.get().then((res) => {\n  //     setCategories(res);\n  //   });\n  // }, [word]);\n\n  useEffect(() => {\n    if (isCategoryCreated) refetch();\n  }, [isCategoryCreated]);\n\n  function sendFile(file) {\n    const url = `${base_url}/images/image`;\n    const data = new FormData();\n    data.append(\"file\", file);\n    const options = {\n      headers: {\n        \"Content-Type\": \"multipart/form-data\",\n      },\n    };\n    axios.post(url, data, options);\n  }\n\n  return (\n    <div>\n      {isAdded ? <Redirect to={`/admin/updatepost/${id}`} /> : null}\n      <Admin>\n        <div className=\"newContent\">\n          <div className=\"newContent-field\">\n            <button onClick={createPost}>{schedule ? \"Agendar\" : \"Publicar\"}</button>\n            Nome:\n            <input type=\"text\" onChange={(e) => setNamePost(e.target.value)} />\n            Agendar\n            <input type=\"checkbox\" onClick={(e) => setSchedule(e.target.checked)} />\n            {schedule ? (\n              <input\n                type=\"datetime-local\"\n                className={schedule ? \"schedule-show\" : \"schedule\"}\n                onChange={(e) => setDatetime(e.target.value)}\n              />\n            ) : null}\n            Slide\n            <input type=\"checkbox\" onClick={(e) => setSlide(e.target.checked)} />\n            Meio\n            <input type=\"checkbox\" onClick={(e) => setMiddle(e.target.checked)} />\n            Gameplay\n            <input type=\"checkbox\" onClick={(e) => setGameplay(e.target.checked)} />\n            Galeria\n            <input type=\"checkbox\" onClick={(e) => setGallery(e.target.checked)} />\n            <NewCategory isCategoryCreated={setIsCategoryCreated} />\n            <select onChange={(e) => setCategory(e.target.value)}>\n              <option>Escolha uma Categoria</option>\n              {data &&\n                data.getAllCategories.map((res, i) => (\n                  <option className=\"option-category\" key={i}>\n                    {res.name}\n                  </option>\n                ))}\n            </select>\n            <img src={`/${thumb}`} alt={thumb} />\n            <div>\n              <button type=\"button\" onClick={() => setModalShow(true)}>\n                Adicionar Imagem\n              </button>\n              <Modal\n                open={modalShow}\n                onClose={() => setModalShow(false)}\n                aria-labelledby=\"simple-modal-title\"\n                aria-describedby=\"simple-modal-description\"\n              >\n                {\n                  <ImagesWIndow\n                    show={modalShow}\n                    onHide={() => setModalShow(false)}\n                    setThumb={setThumb}\n                    setModalShow={setModalShow}\n                  />\n                }\n              </Modal>\n            </div>\n          </div>\n          <div className=\"newContent-form\">\n            <SunEditor\n              ref={editor}\n              lang=\"pt_br\"\n              width=\"100%\"\n              height=\"400\"\n              name=\"my-editor\"\n              setOptions={{\n                mode: \"classic\",\n                katex: \"window.katex\",\n                imageWidth: \"(auto)\",\n                imageHeight: \"(auto)\",\n                // imageUploadUrl: `${base_url}upload`,\n                imageAccept: \"*\",\n                imageGalleryUrl: `${base_url}/images`,\n                imageFileInput: true,\n                videoFileInput: false,\n                tabDisable: false,\n                buttonList: [\n                  [\n                    \"undo\",\n                    \"redo\",\n                    \"font\",\n                    \"fontSize\",\n                    \"formatBlock\",\n                    \"paragraphStyle\",\n                    \"blockquote\",\n                    \"bold\",\n                    \"underline\",\n                    \"italic\",\n                    \"strike\",\n                    \"subscript\",\n                    \"superscript\",\n                    \"fontColor\",\n                    \"hiliteColor\",\n                    \"textStyle\",\n                    \"removeFormat\",\n                    \"outdent\",\n                    \"indent\",\n                    \"align\",\n                    \"horizontalRule\",\n                    \"list\",\n                    \"lineHeight\",\n                    \"table\",\n                    \"link\",\n                    \"image\",\n                    \"video\",\n                    \"audio\",\n                    \"math\",\n                    \"imageGallery\",\n                    \"fullScreen\",\n                    \"showBlocks\",\n                    \"codeView\",\n                    \"preview\",\n                    \"print\",\n                    \"save\",\n                    \"template\",\n                  ],\n                ],\n              }}\n              onChange={dataForm}\n              onImageUploadBefore={(files) => {\n                let nameImage = files[0].name;\n                sendFile(files[0]);\n                editor.current.editor.insertHTML(`<img src=\"/${nameImage}\">`);\n                return true;\n              }}\n            />\n          </div>\n        </div>\n      </Admin>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}