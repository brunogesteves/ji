{"ast":null,"code":"var _jsxFileName = \"/home/bruno/trabalho/ji/src/Pages/Admin/UpdatePost/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from \"react\";\nimport slugify from \"react-slugify\";\nimport { useParams } from \"react-router-dom\";\nimport SunEditor from \"suneditor-react\";\nimport \"suneditor/dist/css/suneditor.min.css\"; // Import Sun Editor's CSS File\n\nimport axios from \"axios\";\nimport Modal from \"@mui/material/Modal\";\nimport Admin from \"../Admin\";\nimport ImagesWIndow from \"../../../Components/ImagesWIndow/ImagesWIndow\";\nimport NewCategory from \"../../../Components/NewCategory\";\nimport \"./UpdatePost.css\";\nimport { useQuery } from \"@apollo/client\";\nimport { GET_ADMIN_POST_INFO, GET_ALL_CATEGORIES } from \"../../../Graphql/Queries\"; // import { UPDATE_ADMIN_POST_INFO } from \"../../../Graphql/Mutations\";\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function UpdatePost(props) {\n  _s();\n\n  const nameParams = useParams();\n  let idNumber = nameParams.id;\n  const [infoPost, setInfoPost] = useState({\n    name: \"\",\n    content: \"\",\n    category: \"\",\n    slide: false,\n    middle: false,\n    gameplay: false,\n    public: false,\n    midSection: false,\n    thumb: \"\"\n  });\n  const [file, setFile] = useState(\"\");\n  const [modalShow, setModalShow] = useState(false);\n  const [reloadPage, setReloadPage] = useState(false);\n  const editor = useRef(null);\n\n  function dataForm(data) {\n    setInfoPost({ ...infoPost,\n      content: data\n    });\n  } // useEffect(() => {\n  //   let image = file.name;\n  //   const url = `${base_url}/upload/${image}`;\n  //   const data = new FormData();\n  //   data.append(\"file\", file);\n  //   const options = {\n  //     headers: {\n  //       \"Content-Type\": \"multipart/form-data\",\n  //     },\n  //   };\n  //   axios.post(url, data, options);\n  // }, [file]);\n\n\n  const {\n    data,\n    refetch\n  } = useQuery(GET_ADMIN_POST_INFO, {\n    variables: {\n      id: idNumber\n    }\n  });\n  const {\n    data: categories\n  } = useQuery(GET_ALL_CATEGORIES);\n  const postInfo = data ? data.getAdminInfoPost[0] : \"\";\n  console.log(\"pagina de atualizar\", postInfo); // const [updatePost, { data: isUpdated }] = useMutation(UPDATE_ADMIN_POST_INFO);\n\n  useEffect(() => {\n    if (data) {\n      setInfoPost({\n        name: data.getAdminInfoPost[0].name,\n        content: data.getAdminInfoPost[0].conte,\n        category: data.getAdminInfoPost[0].category,\n        slide: data.getAdminInfoPost[0].slide,\n        middle: data.getAdminInfoPost[0].middle,\n        gameplay: data.getAdminInfoPost[0].gameplay,\n        public: data.getAdminInfoPost[0].public,\n        midSection: data.getAdminInfoPost[0].midSection,\n        thumb: data.getAdminInfoPost[0].thumb\n      });\n    }\n  }, [data]); // useEffect(() => {\n  //   if (reloadPage && isUpdated && isUpdated.updatePost.successfull) {\n  //     refetch();\n  //   }\n  // }, [reloadPage]);\n\n  function reload() {\n    updatePost({\n      variables: {\n        id: idNumber,\n        name: infoPost.name,\n        content: infoPost.content,\n        category: infoPost.category,\n        slug: slugify(infoPost.name, {\n          delimiter: \"-\"\n        }),\n        slide: infoPost.slide,\n        middle: infoPost.middle,\n        gameplay: infoPost.gameplay,\n        publicPost: infoPost.publicPost,\n        midSection: infoPost.midSection,\n        thumb: infoPost.thumb\n      }\n    });\n    setReloadPage(true);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Admin, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"updateContent\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"updateContent-field\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"update-warning\",\n            children: [isUpdated && isUpdated.updatePost.successfull ? \"\" : \"Atualizado\", \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: reload,\n            children: \"Atualizar\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 13\n          }, this), \"Nome:\", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            onChange: e => setInfoPost({\n              name: e.target.value\n            }),\n            value: namePost\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [\"Publico\", /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"checkbox\",\n              onClick: e => setPublicPost(e.target.checked),\n              defaultChecked: postInfo.public ? true : null\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 118,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [\"Slide\", /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"checkbox\",\n              onClick: e => setSlide(e.target.checked),\n              defaultChecked: postInfo.slide ? true : null\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 126,\n              columnNumber: 15\n            }, this), \"Meio\", /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"checkbox\",\n              onClick: e => setMiddle(e.target.checked),\n              defaultChecked: postInfo.middle ? true : null\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 132,\n              columnNumber: 15\n            }, this), \"Gameplay\", /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"checkbox\",\n              onClick: e => setGameplay(e.target.checked),\n              defaultChecked: postInfo.gameplay ? true : null\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 138,\n              columnNumber: 15\n            }, this), \"midSection\", /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"checkbox\",\n              onClick: e => setMidSection(e.target.checked),\n              defaultChecked: postInfo.gameplay ? true : null\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 144,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(NewCategory, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 150,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            value: postInfo.category,\n            onChange: e => setCategory(e.target.value),\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              children: \"Escolha uma Categoria\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 152,\n              columnNumber: 15\n            }, this), categories && categories.getAllCategories.map((cat, i) => /*#__PURE__*/_jsxDEV(\"option\", {\n              children: cat.name.toUpperCase()\n            }, i, false, {\n              fileName: _jsxFileName,\n              lineNumber: 155,\n              columnNumber: 19\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 151,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n            src: `/${postInfo.thumb}`,\n            alt: postInfo.thumb\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 158,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            onClick: () => setModalShow(true),\n            children: \"Mudar Imagem\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 159,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Modal, {\n            open: modalShow,\n            onClose: () => setModalShow(false),\n            \"aria-labelledby\": \"simple-modal-title\",\n            \"aria-describedby\": \"simple-modal-description\",\n            children: /*#__PURE__*/_jsxDEV(ImagesWIndow, {\n              show: modalShow,\n              onHide: () => setModalShow(false),\n              setThumb: setThumb,\n              setModalShow: setModalShow\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 169,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 162,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"updateContent-form\",\n          children: /*#__PURE__*/_jsxDEV(SunEditor, {\n            setContents: postInfo.content,\n            ref: editor,\n            lang: \"pt_br\",\n            width: \"92%\",\n            height: \"400\",\n            name: \"my-editor\",\n            setOptions: {\n              mode: \"classic\",\n              katex: \"window.katex\",\n              imageWidth: \"(auto)\",\n              imageHeight: \"(auto)\",\n              // imageUploadUrl: `${base_url}/ckimage`,\n              imageAccept: \"*\",\n              // imageGalleryUrl: `${base_url}/images`,\n              imageFileInput: true,\n              videoFileInput: false,\n              tabDisable: false,\n              buttonList: [[\"undo\", \"redo\", \"font\", \"fontSize\", \"formatBlock\", \"paragraphStyle\", \"blockquote\", \"bold\", \"underline\", \"italic\", \"strike\", \"subscript\", \"superscript\", \"fontColor\", \"hiliteColor\", \"textStyle\", \"removeFormat\", \"outdent\", \"indent\", \"align\", \"horizontalRule\", \"list\", \"lineHeight\", \"table\", \"link\", \"image\", \"video\", \"audio\", \"math\", \"imageGallery\", \"fullScreen\", \"showBlocks\", \"codeView\", \"preview\", \"print\", \"save\", \"template\"]]\n            },\n            onChange: dataForm,\n            onImageUploadBefore: files => {\n              let nameImage = files[0].name;\n              setFile(files[0]);\n              editor.current.editor.insertHTML(`<img src=\"/${nameImage}\">`);\n              return true;\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 179,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 106,\n    columnNumber: 5\n  }, this);\n}\n\n_s(UpdatePost, \"Y6DMB7hDsyn4AmY4DuykLrRt/+U=\", false, function () {\n  return [useParams, useQuery, useQuery];\n});\n\n_c = UpdatePost;\n\nvar _c;\n\n$RefreshReg$(_c, \"UpdatePost\");","map":{"version":3,"sources":["/home/bruno/trabalho/ji/src/Pages/Admin/UpdatePost/index.js"],"names":["React","useState","useEffect","useRef","slugify","useParams","SunEditor","axios","Modal","Admin","ImagesWIndow","NewCategory","useQuery","GET_ADMIN_POST_INFO","GET_ALL_CATEGORIES","UpdatePost","props","nameParams","idNumber","id","infoPost","setInfoPost","name","content","category","slide","middle","gameplay","public","midSection","thumb","file","setFile","modalShow","setModalShow","reloadPage","setReloadPage","editor","dataForm","data","refetch","variables","categories","postInfo","getAdminInfoPost","console","log","conte","reload","updatePost","slug","delimiter","publicPost","isUpdated","successfull","e","target","value","namePost","setPublicPost","checked","setSlide","setMiddle","setGameplay","setMidSection","setCategory","getAllCategories","map","cat","i","toUpperCase","setThumb","mode","katex","imageWidth","imageHeight","imageAccept","imageFileInput","videoFileInput","tabDisable","buttonList","files","nameImage","current","insertHTML"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport slugify from \"react-slugify\";\nimport { useParams } from \"react-router-dom\";\nimport SunEditor from \"suneditor-react\";\n\nimport \"suneditor/dist/css/suneditor.min.css\"; // Import Sun Editor's CSS File\nimport axios from \"axios\";\nimport Modal from \"@mui/material/Modal\";\n\nimport Admin from \"../Admin\";\nimport ImagesWIndow from \"../../../Components/ImagesWIndow/ImagesWIndow\";\nimport NewCategory from \"../../../Components/NewCategory\";\n\nimport \"./UpdatePost.css\";\nimport { useQuery } from \"@apollo/client\";\nimport { GET_ADMIN_POST_INFO, GET_ALL_CATEGORIES } from \"../../../Graphql/Queries\";\n// import { UPDATE_ADMIN_POST_INFO } from \"../../../Graphql/Mutations\";\n\nexport default function UpdatePost(props) {\n  const nameParams = useParams();\n  let idNumber = nameParams.id;\n\n  const [infoPost, setInfoPost] = useState({\n    name: \"\",\n    content: \"\",\n    category: \"\",\n    slide: false,\n    middle: false,\n    gameplay: false,\n    public: false,\n    midSection: false,\n    thumb: \"\",\n  });\n  const [file, setFile] = useState(\"\");\n  const [modalShow, setModalShow] = useState(false);\n  const [reloadPage, setReloadPage] = useState(false);\n  const editor = useRef(null);\n\n  function dataForm(data) {\n    setInfoPost({ ...infoPost, content: data });\n  }\n\n  // useEffect(() => {\n  //   let image = file.name;\n  //   const url = `${base_url}/upload/${image}`;\n  //   const data = new FormData();\n  //   data.append(\"file\", file);\n  //   const options = {\n  //     headers: {\n  //       \"Content-Type\": \"multipart/form-data\",\n  //     },\n  //   };\n  //   axios.post(url, data, options);\n  // }, [file]);\n\n  const { data, refetch } = useQuery(GET_ADMIN_POST_INFO, { variables: { id: idNumber } });\n  const { data: categories } = useQuery(GET_ALL_CATEGORIES);\n\n  const postInfo = data ? data.getAdminInfoPost[0] : \"\";\n  console.log(\"pagina de atualizar\", postInfo);\n\n  // const [updatePost, { data: isUpdated }] = useMutation(UPDATE_ADMIN_POST_INFO);\n\n  useEffect(() => {\n    if (data) {\n      setInfoPost({\n        name: data.getAdminInfoPost[0].name,\n        content: data.getAdminInfoPost[0].conte,\n        category: data.getAdminInfoPost[0].category,\n        slide: data.getAdminInfoPost[0].slide,\n        middle: data.getAdminInfoPost[0].middle,\n        gameplay: data.getAdminInfoPost[0].gameplay,\n        public: data.getAdminInfoPost[0].public,\n        midSection: data.getAdminInfoPost[0].midSection,\n        thumb: data.getAdminInfoPost[0].thumb,\n      });\n    }\n  }, [data]);\n\n  // useEffect(() => {\n  //   if (reloadPage && isUpdated && isUpdated.updatePost.successfull) {\n  //     refetch();\n  //   }\n  // }, [reloadPage]);\n\n  function reload() {\n    updatePost({\n      variables: {\n        id: idNumber,\n        name: infoPost.name,\n        content: infoPost.content,\n        category: infoPost.category,\n        slug: slugify(infoPost.name, { delimiter: \"-\" }),\n        slide: infoPost.slide,\n        middle: infoPost.middle,\n        gameplay: infoPost.gameplay,\n        publicPost: infoPost.publicPost,\n        midSection: infoPost.midSection,\n        thumb: infoPost.thumb,\n      },\n    });\n    setReloadPage(true);\n  }\n\n  return (\n    <div>\n      <Admin>\n        <div className=\"updateContent\">\n          <div className=\"updateContent-field\">\n            <p className=\"update-warning\">\n              {isUpdated && isUpdated.updatePost.successfull ? \"\" : \"Atualizado\"}{\" \"}\n            </p>\n            <button onClick={reload}>Atualizar</button>\n            Nome:\n            <input type=\"text\" onChange={(e) => setInfoPost({name:e.target.value})} value={namePost} />\n            <div>\n              Publico\n              <input\n                type=\"checkbox\"\n                onClick={(e) => setPublicPost(e.target.checked)}\n                defaultChecked={postInfo.public ? true : null}\n              />\n            </div>\n            <div>\n              Slide\n              <input\n                type=\"checkbox\"\n                onClick={(e) => setSlide(e.target.checked)}\n                defaultChecked={postInfo.slide ? true : null}\n              />\n              Meio\n              <input\n                type=\"checkbox\"\n                onClick={(e) => setMiddle(e.target.checked)}\n                defaultChecked={postInfo.middle ? true : null}\n              />\n              Gameplay\n              <input\n                type=\"checkbox\"\n                onClick={(e) => setGameplay(e.target.checked)}\n                defaultChecked={postInfo.gameplay ? true : null}\n              />\n              midSection\n              <input\n                type=\"checkbox\"\n                onClick={(e) => setMidSection(e.target.checked)}\n                defaultChecked={postInfo.gameplay ? true : null}\n              />\n            </div>\n            <NewCategory />\n            <select value={postInfo.category} onChange={(e) => setCategory(e.target.value)}>\n              <option>Escolha uma Categoria</option>\n              {categories &&\n                categories.getAllCategories.map((cat, i) => (\n                  <option key={i}>{cat.name.toUpperCase()}</option>\n                ))}\n            </select>\n            <img src={`/${postInfo.thumb}`} alt={postInfo.thumb} />\n            <button type=\"button\" onClick={() => setModalShow(true)}>\n              Mudar Imagem\n            </button>\n            <Modal\n              open={modalShow}\n              onClose={() => setModalShow(false)}\n              aria-labelledby=\"simple-modal-title\"\n              aria-describedby=\"simple-modal-description\"\n            >\n              {\n                <ImagesWIndow\n                  show={modalShow}\n                  onHide={() => setModalShow(false)}\n                  setThumb={setThumb}\n                  setModalShow={setModalShow}\n                />\n              }\n            </Modal>\n          </div>\n          <div className=\"updateContent-form\">\n            <SunEditor\n              setContents={postInfo.content}\n              ref={editor}\n              lang=\"pt_br\"\n              width=\"92%\"\n              height=\"400\"\n              name=\"my-editor\"\n              setOptions={{\n                mode: \"classic\",\n                katex: \"window.katex\",\n                imageWidth: \"(auto)\",\n                imageHeight: \"(auto)\",\n                // imageUploadUrl: `${base_url}/ckimage`,\n                imageAccept: \"*\",\n                // imageGalleryUrl: `${base_url}/images`,\n                imageFileInput: true,\n                videoFileInput: false,\n                tabDisable: false,\n                buttonList: [\n                  [\n                    \"undo\",\n                    \"redo\",\n                    \"font\",\n                    \"fontSize\",\n                    \"formatBlock\",\n                    \"paragraphStyle\",\n                    \"blockquote\",\n                    \"bold\",\n                    \"underline\",\n                    \"italic\",\n                    \"strike\",\n                    \"subscript\",\n                    \"superscript\",\n                    \"fontColor\",\n                    \"hiliteColor\",\n                    \"textStyle\",\n                    \"removeFormat\",\n                    \"outdent\",\n                    \"indent\",\n                    \"align\",\n                    \"horizontalRule\",\n                    \"list\",\n                    \"lineHeight\",\n                    \"table\",\n                    \"link\",\n                    \"image\",\n                    \"video\",\n                    \"audio\",\n                    \"math\",\n                    \"imageGallery\",\n                    \"fullScreen\",\n                    \"showBlocks\",\n                    \"codeView\",\n                    \"preview\",\n                    \"print\",\n                    \"save\",\n                    \"template\",\n                  ],\n                ],\n              }}\n              onChange={dataForm}\n              onImageUploadBefore={(files) => {\n                let nameImage = files[0].name;\n                setFile(files[0]);\n                editor.current.editor.insertHTML(`<img src=\"/${nameImage}\">`);\n                return true;\n              }}\n            />\n          </div>\n        </div>\n      </Admin>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}