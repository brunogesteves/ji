{"ast":null,"code":"var _jsxFileName = \"/home/bruno/trabalho/ji/frontend/src/Components/FileDrop/FileDrop.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport Dropzone from \"react-dropzone-uploader\";\nimport axios from \"axios\";\nimport \"react-dropzone-uploader/dist/styles.css\";\nimport \"./FileDrop.css\";\nimport { base_url } from \"../../config\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function FileDrop(props) {\n  _s();\n\n  const [uploadedFile, setUploadedFile] = useState({});\n\n  const getUploadParams = async ({\n    file\n  }) => {\n    console.log(\"file: \", file.name);\n    const data = new FormData();\n    data.append(\"file\", file);\n    const res = await axios.post(`${base_url}/upload`, data, {\n      headers: {\n        \"Content-Type\": \"multipart/form-data\"\n      },\n      onUploadProgress: progressEvent => {\n        setUploadPercentage(parseInt(Math.round(progressEvent.loaded * 100 / progressEvent.total)));\n      }\n    });\n    const {\n      fileName,\n      filePath\n    } = res.data;\n    setUploadedFile(fileName, filePath);\n  }; // called every time a file's `status` changes\n  // const handleChangeStatus = ({ meta, file }, status) => { console.log(status, meta, file) }\n\n\n  const handleChangeStatus = ({\n    xhr\n  }) => {\n    console.log(xhr);\n  }; // receives array of files that are done uploading when submit button is clicked\n\n\n  const handleSubmit = (files, allFiles) => {\n    // console.log(files.map((f) => f.meta));\n    allFiles.forEach(f => f.remove());\n  };\n\n  return /*#__PURE__*/_jsxDEV(Dropzone, {\n    getUploadParams: getUploadParams,\n    onChangeStatus: handleChangeStatus,\n    onSubmit: handleSubmit,\n    accept: \"image/*,audio/*,video/*\",\n    inputContent: \"Adicione Fotos\",\n    inputWithFilesContent: \"Procurar Fotos\",\n    submitButtonContent: \"Apagar\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n}\n\n_s(FileDrop, \"U25GIFJ6f0JJsQp7uCtyA7ODMQ4=\");\n\n_c = FileDrop;\n\nvar _c;\n\n$RefreshReg$(_c, \"FileDrop\");","map":{"version":3,"sources":["/home/bruno/trabalho/ji/frontend/src/Components/FileDrop/FileDrop.js"],"names":["React","useState","Dropzone","axios","base_url","FileDrop","props","uploadedFile","setUploadedFile","getUploadParams","file","console","log","name","data","FormData","append","res","post","headers","onUploadProgress","progressEvent","setUploadPercentage","parseInt","Math","round","loaded","total","fileName","filePath","handleChangeStatus","xhr","handleSubmit","files","allFiles","forEach","f","remove"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,QAAP,MAAqB,yBAArB;AAEA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAO,yCAAP;AACA,OAAO,gBAAP;AACA,SAASC,QAAT,QAAyB,cAAzB;;AAEA,eAAe,SAASC,QAAT,CAAkBC,KAAlB,EAAyB;AAAA;;AACtC,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCP,QAAQ,CAAC,EAAD,CAAhD;;AAEA,QAAMQ,eAAe,GAAG,OAAO;AAAEC,IAAAA;AAAF,GAAP,KAAoB;AAC1CC,IAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBF,IAAI,CAACG,IAA3B;AACA,UAAMC,IAAI,GAAG,IAAIC,QAAJ,EAAb;AACAD,IAAAA,IAAI,CAACE,MAAL,CAAY,MAAZ,EAAoBN,IAApB;AACA,UAAMO,GAAG,GAAG,MAAMd,KAAK,CAACe,IAAN,CAAY,GAAEd,QAAS,SAAvB,EAAiCU,IAAjC,EAAuC;AACvDK,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT,OAD8C;AAIvDC,MAAAA,gBAAgB,EAAGC,aAAD,IAAmB;AACnCC,QAAAA,mBAAmB,CACjBC,QAAQ,CACNC,IAAI,CAACC,KAAL,CAAYJ,aAAa,CAACK,MAAd,GAAuB,GAAxB,GAA+BL,aAAa,CAACM,KAAxD,CADM,CADS,CAAnB;AAKD;AAVsD,KAAvC,CAAlB;AAYA,UAAM;AAAEC,MAAAA,QAAF;AAAYC,MAAAA;AAAZ,QAAyBZ,GAAG,CAACH,IAAnC;AAEAN,IAAAA,eAAe,CAACoB,QAAD,EAAWC,QAAX,CAAf;AACD,GAnBD,CAHsC,CAwBtC;AACA;;;AACA,QAAMC,kBAAkB,GAAG,CAAC;AAAEC,IAAAA;AAAF,GAAD,KAAa;AACtCpB,IAAAA,OAAO,CAACC,GAAR,CAAYmB,GAAZ;AACD,GAFD,CA1BsC,CA8BtC;;;AACA,QAAMC,YAAY,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAqB;AACxC;AACAA,IAAAA,QAAQ,CAACC,OAAT,CAAkBC,CAAD,IAAOA,CAAC,CAACC,MAAF,EAAxB;AACD,GAHD;;AAKA,sBACE,QAAC,QAAD;AACE,IAAA,eAAe,EAAE5B,eADnB;AAEE,IAAA,cAAc,EAAEqB,kBAFlB;AAGE,IAAA,QAAQ,EAAEE,YAHZ;AAIE,IAAA,MAAM,EAAC,yBAJT;AAKE,IAAA,YAAY,EAAE,gBALhB;AAME,IAAA,qBAAqB,EAAE,gBANzB;AAOE,IAAA,mBAAmB,EAAE;AAPvB;AAAA;AAAA;AAAA;AAAA,UADF;AAWD;;GA/CuB3B,Q;;KAAAA,Q","sourcesContent":["import React, { useState } from \"react\";\nimport Dropzone from \"react-dropzone-uploader\";\n\nimport axios from \"axios\";\nimport \"react-dropzone-uploader/dist/styles.css\";\nimport \"./FileDrop.css\";\nimport { base_url } from \"../../config\";\n\nexport default function FileDrop(props) {\n  const [uploadedFile, setUploadedFile] = useState({});\n\n  const getUploadParams = async ({ file }) => {\n    console.log(\"file: \", file.name);\n    const data = new FormData();\n    data.append(\"file\", file);\n    const res = await axios.post(`${base_url}/upload`, data, {\n      headers: {\n        \"Content-Type\": \"multipart/form-data\",\n      },\n      onUploadProgress: (progressEvent) => {\n        setUploadPercentage(\n          parseInt(\n            Math.round((progressEvent.loaded * 100) / progressEvent.total)\n          )\n        );\n      },\n    });\n    const { fileName, filePath } = res.data;\n\n    setUploadedFile(fileName, filePath);\n  };\n\n  // called every time a file's `status` changes\n  // const handleChangeStatus = ({ meta, file }, status) => { console.log(status, meta, file) }\n  const handleChangeStatus = ({ xhr }) => {\n    console.log(xhr);\n  };\n\n  // receives array of files that are done uploading when submit button is clicked\n  const handleSubmit = (files, allFiles) => {\n    // console.log(files.map((f) => f.meta));\n    allFiles.forEach((f) => f.remove());\n  };\n\n  return (\n    <Dropzone\n      getUploadParams={getUploadParams}\n      onChangeStatus={handleChangeStatus}\n      onSubmit={handleSubmit}\n      accept=\"image/*,audio/*,video/*\"\n      inputContent={\"Adicione Fotos\"}\n      inputWithFilesContent={\"Procurar Fotos\"}\n      submitButtonContent={\"Apagar\"}\n    />\n  );\n}\n"]},"metadata":{},"sourceType":"module"}